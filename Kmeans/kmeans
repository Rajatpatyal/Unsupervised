import numpy as np
import pandas as pd
from sklearn.cluster import MeanShift, KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

# Load and preprocess data (replace with your data loading and preprocessing steps)
# data = pd.read_csv('your_data.csv')
# preprocess data if needed

# Feature selection (choose relevant columns for clustering)
X = data[['feature1', 'feature2', ...]]  # Replace with your selected features

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Define the number of clusters for K-Means
num_clusters = [2, 3, 4, 5, 6]  # You can adjust this list based on the expected number of clusters

# Initialize results
best_silhouette = -1
best_model = None

# Perform clustering with K-Means
for n_clusters in num_clusters:
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    kmeans_labels = kmeans.fit_predict(X_scaled)
    silhouette_avg = silhouette_score(X_scaled, kmeans_labels)
    
    if silhouette_avg > best_silhouette:
        best_silhouette = silhouette_avg
        best_model = kmeans

print("Best K-Means Model:")
print("Number of Clusters:", best_model.n_clusters)
print("Silhouette Score:", best_silhouette)

# Perform clustering with MeanShift
meanshift = MeanShift()
meanshift_labels = meanshift.fit_predict(X_scaled)
meanshift_silhouette = silhouette_score(X_scaled, meanshift_labels)

print("MeanShift Model:")
print("Silhouette Score:", meanshift_silhouette)
